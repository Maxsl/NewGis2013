# -*- coding:utf-8 -*-'''gispointcached.py提供网格化poi的检索，支持多用户和用户的多任务'''import sys,os,os.path,time,struct,traceback,threading,datetimefrom xml.dom import getDOMImplementationimport sqlite3import stringimport giserror,gisbasefrom sysconfig import *from gisbase import *from django.http import *from django.shortcuts import render_to_responsefrom django.db import connectionfrom django.db.models import Sumfrom django.db import transactionfrom  giscore.models import *'''用户'''class GridCell:	def __init__(self,x=0,y=0):		self.x = x		self.y = y		self.data=[]	def __cmp__(self,o):		return (self.x==o.x and  self.y==o.y)		def __hash__(self):		return (self.x+self.y)%1000class GisPointCached:	def __init__(self):		self.grids={} #hash网格点 作为缓冲		self.sessions={} #用户session编号						# session -> {{taskes},}		#每个登录用户会话可以聚合多个任务数组 taskes,以便支持多地图同时开启	_hinstance = None	@classmethod	def instance(CLS):		if not GisPointCached._hinstance:			GisPointCached._hinstance = GisPointCached()		return GisPointCached._hinstance	#客户端在显示地图时接收信息点并叠加到地图上，当tile无效的时候应撤销	#openlayers在获取tile数据和丢弃tile时可以获取tile的地理区域	def getUserPointList(self,user,sessionid,mapid,res,rc):		'''		user - 当前用户信息		sesisonid - 用户登录会话		mapid - 用户的地图任务编号		res - 地图显示精度		rc  - 地图显示区域		'''		lb,rt = GridRangeByGeoRect(rc)		if not self.sessions.has_key(sessionid):			self.sesisons[sessionsid] = {'creatime':datetime.datetime.now(),'maps':{}}		maps = self.sesisons[sessionsid]['maps']		if not maps.has_key(mapid):			maps[mapid] = []				pass		def clearPointList(self,sessionid,taskid,res,rc):		pass	def init():	passif __name__=='__main__':	init()	