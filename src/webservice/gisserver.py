# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,threading,datetime,calendar,string,jsonfrom xml.dom import getDOMImplementationsys.path.insert(0,'../../tce/python')sys.path.insert(0,'../')import sqlite3import string#import giserror,gisbase#from sysconfig import *from webbase import *import tcelib as tcefrom newgis import *from django.http import *from django.shortcuts import render_to_responsefrom django.db import connectionfrom django.db.models import Sumfrom django.db import transactionfrom  giscore.models import *import giscore.models as GMimport logginimport cipherimport utilsclass MediaDataType:		GPS   = 1<<0	AUDIO = 1<<1	VIDEO = 1<<2	IMAGE = 1<<3	TEXT =  1<<4	IODATA = 1<<5	RAWBLOB = 1<<6		COMMAND = 1<<7	#通用命令	ALARM =  1<<8  #报警信息	UNDEFINED = 0xffclass GisServer:	def __init__(self):				try:#			self.idxdb = sqlite3.connect('d:/geoindex.db3')			pass		except:			pass		self.init()		def init(self):		self.ctrlconn = None		self.log = loggin.Logger('test').addHandler(loggin.stdout()).addHandler(loggin.FileHandler('gisserver',subfix='_%Y%m%d.txt'))		def getLog(self):		return self.log	_hinstance = None	@classmethod	def instance(CLS):		if not GisServer._hinstance:			GisServer._hinstance = GisServer()		return GisServer._hinstance		def getIdentifyCodeImage(self,r):		"""			索取登录验证码图片		"""		try:			pass		except:			return SYSERROR()	def doLogin(self,r,username,passwd):		#self.sysLogout(r,0)		cr = CallReturn(succ=False,msg=u'您提供的用户名或密码错误!')		if username.strip()=='' or passwd.strip()=='':			return cr		try:			rs = AppUser.objects.filter(sid=username,passwd=passwd).values()			log = UserLoginLog(login=username,passwd=passwd,						   succ = False,						   time=datetime.datetime.now(),						   ipaddr=str(r.META.get('REMOTE_ADDR')),						   region='',						   usertype=1)	#		if identcode!= r.session.get('authkey','k'*10):	#			cr = CallReturn(succ = False,msg=u'图像验证码错误!')	#			o = None			if rs:				user = rs[0]				r.session['autherized'] =True				r.session['user'] = user				r.session['userid'] = user['id']				#写入登录日志				log.succ = True				cr.succ = True				info = {'id':user['id'],'user':user['sid'],'login_time':int(time.time())}				token = cipher.encryptToken(user)				cr.result = {'user':user,'token':token,				             'params':				                {'gwa':'sw2us.com:4002',				                 'wms':'http://sw2us.com:4004/wms'				                }							}			else:				r.session['autherized'] = False				r.session['user'] = None				log.detail=u'指定的用户名或密码错误!'			##			net = utils.inet_aton(log.ipaddr)#			sql = "select name from IpRepository where startip<=%s and endip>=%s"#			cur = connection.cursor()#			cur.execute(sql,(net,net,))#			r = cur.fetchone()#			print log.ipaddr,net#			if r:#				log.region = r[0]#			log.save()			print 'userlogin succ:'			print repr(cr.result)		except:			return SYSERROR()		return cr		#退出系统	def doLogout(self,r):		r.session['autherized'] = False		r.session['user'] = None		return CallReturn()		def __xx__getCurrentUser(self,r=None):		cr = CallReturn()		#u ={'id':1,'sid':'tiger','name':u'主管','clientid':1}		u = CurrentAppUser(1)		u.sid = 'tiger'		cr.result = utils.hashobject(u)		return cr	def getCurrentUser(self,r):		cr = CallReturn()		#u ={'id':1,'sid':'tiger','name':u'主管','clientid':1}		try:			u = CurrentAppUser(r.session['userid'])#			user ={'id':r.session['userid']}#			user = utils.hashobject(user)#			print '--', user			return u;		except:			return SYSERROR()	#当前用户	def __currentUser(self,r):		#cr = CallReturn()		#u ={'id':1,'sid':'tiger','name':u'主管','clientid':1}		user = None		try:			user = AppUser.objects.get(id=self.getCurrentUser(r).id)		except:			return None		return user		#获取所有ao对象,携带最新一次gps位置信息到flex端	# gps数据必须是有效定位数据	def getActiveObjectList(self,r):		#from pycomm import geotools		try:			uid = self.getCurrentUser(r).id			aos = []			u = GM.AppUser.objects.filter(id=uid)			if not u:				return CallReturn(result=aos)			aos = u[0].aos.values()			for ao in aos:								ao['gps'] = None #携带gps数据				rs = AOMData_Gps.objects.filter(ao__id=ao['id']).exclude(lon=0).order_by('-savetime')[:1].values()				if len(rs):					ao['gps'] = rs[0] #最一次位置信息					self.cvtpoint_gps2map(ao['gps'])			return CallReturn(result=aos)		except:			self.getLog().error(traceback.format_exc())			return CallReturn(succ=False,msg=u'系统处理异常!')	#根据名称返回ao对象列表	def getActiveObjectListByName(self,r,name):		try:			name = name.strip()			aos= AppUser.objects.get(id=self.getCurrentUser(r).id).\					aos.filter(name__icontains=name).values()			return CallReturn(result=aos)		except:			self.getLog().error(traceback.format_exc())			return CallReturn(succ=False,msg=u'系统处理异常!')	#返回所有ao对象(分组)	def getActiveObjectListWithGroup(self,r):		try:			doc = getDOMImplementation().createDocument(None,None,None)			nr = doc.createElement('Root')			nr.setAttribute('root','true')			nr.setAttribute('id','0')			nr.setAttribute('label','Root')			doc.appendChild(nr)			groups = AO_AppGroup.objects.filter(user__id=self.getCurrentUser(r).id)			for g in groups:				ng = doc.createElement('Group')				ng.setAttribute('id','0') #str(g.id))				ng.setAttribute('label',g.name)				ng.setAttribute('icon','groupItem')				nr.appendChild(ng)				aos = g.aos.order_by('name')				for ao in aos: #将ao添加到group内					nao = doc.createElement('Item')					nao.setAttribute('id',str(ao.id))					nao.setAttribute('label',ao.name)					nao.setAttribute('icon','aoItem')					ng.appendChild(nao)			xml = doc.toxml()			xml = nr.toxml()			print xml			return CallReturn(result=xml)		except:			traceback.print_exc()			return CallReturn(succ=False,msg=u'系统处理异常！')				def convertXy_g2m(self,r,x,y):		import geotools		x,y = float(x),float(y)		x,y = geotools.point_g2m(x , y )		return CallReturn(result={'x':x,'y':y})	##根据名称获取ao对象列表	def queryActiveObjectByName(self,r,name):		try:			name = name.strip()			uid = self.getCurrentUser(r).id			#aos = ActiveObject.objects.filter(user__id=uid,name__icontains=name).order_by('name').values()			#print AppUser.objects.get(id=self.getCurrentUser().result['id'])			gg = AO_AppGroup.objects.filter(user__id = uid)			result=[]			for g in gg:				aos = g.aos.filter(name__icontains=name).values()				for ao in aos:					ao['group'] = g.name				result+=aos				print aos			utils.add_index(result)			return CallReturn(result=result)		except:			return SYSERROR()						def getVisitedPointList(self,r,name):		try:			id = self.getCurrentUser(r).id			name = name.strip()			set = VisitedPoint.objects.filter(user__id=id,name__icontains=name).order_by('name').values()			for r in set:				r['location'] = "%.4f,%.4f"%(r['lon'],r['lat'])			print set			return CallReturn(result={'rs':set})		except:			print traceback.format_exc().decode('utf8')			return CallReturn(succ=False,msg=u'系统处理异常!')		def createVisitedPoint(self,r,vp):		try:			vp.name = vp.name.strip()			#vp.comment = vp.comment.strip()			if not vp.name:				return CallReturn(succ=False,msg=u'名称不能为空!')			cnt = VisitedPoint.objects.filter(name=vp.name).count()			if cnt:				return CallReturn(succ=False,msg=u'重复的访问点名称!')			cu = self.__currentUser(r)#			rs = VisitedPointGroup.objects.filter(id=vp.group)#			grp = None#			if rs:#				grp = rs[0]			o = VisitedPoint()			o.name = vp.name			o.zoom = vp.scalelevel#			o.group = grp			o.lon = vp.lon			o.lat = vp.lat						o.wkt = ''			o.user = cu#			o.comment = vp.comment			o.save()			return CallReturn()		except:			return SYSERROR()		def updateVisitedPoint(self,r,vp):		try:			vp.name = vp.name.strip()			vp.comment = vp.comment.strip()			if vp.name.strip() =='':				return CallReturn(succ=False,msg=u'名称不能为空!')						rs = VisitedPointGroup.objects.filter(id=vp.group)			grp = None			if rs:				grp = rs[0]			o = VisitedPoint.objects.get(id=vp.id)			o.name = vp.name.strip()			o.zoom = vp.zoom			o.lon = vp.lon			o.lat = vp.lat			o.comment = vp.comment			o.save()			return CallReturn()		except:			return SYSERROR()	def  queryVisitedPointList(self,r,name):		try:			rs=VisitedPoint.objects.filter(name__icontains=name,user__id=self.getCurrentUser(r).id).order_by('name').values()			print rs			for r in rs:				r['location'] = "%s,%s"%(round(r['lon'],4),round(r['lat'],4))			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()		def deleteVisitedPoint(self,r,rid):		try:			VisitedPoint.objects.get(id=rid).delete()		except:			return SYSERROR()		return CallReturn()		#获取ao对象信息	def getActiveObjectInfo(self,r,id):		try:			aos = ActiveObject.objects.filter(id=id).values()			ao = None			if len(aos):				ao = aos[0]			if ao == None:				return CallReturn(succ=False,msg=u'无效的活动对象!')			return CallReturn(result=ao)		except:			traceback.print_exc()			return CallReturn(succ=False,msg=u'系统处理异常!')	#获取系统参数	def getSystemParameter(self,r,name,default=''):		#default - 不存在则返回默认值		rs = SystemGlobalSettings.objects.filter(name=name)		#print rs,name		if len(rs):			o =rs[0]						return CallReturn(result=o.value.strip())		return CallReturn(result=default)			#读取系统所有配置参数	#以hash方式返回	def getSystemParamList(self,r):		try:			rs = SystemGlobalSettings.objects.all().order_by('name').values()			return CallReturn(result=rs)		except:			return SYSERROR()	def cvtpoint_gps2map(self,gps):		import geotools		x,y = geotools.point_g2m(gps['lon'] , gps['lat'] )		gps['lon'] = x		gps['lat'] = y		gps['systime'] = utils.mk_timestamp(gps['savetime'])	#获取ao最近n小时的gps轨迹数据(实时监控)	#注意：返回数据必须与dgw实时回传给flex的相同格式	#防止由于异步操作，返回ao的gps数据时，用户同时点击了其他的焦点车辆，所以必须回传aoid	def getAoTrackPathNearestTime(self,r,aoid,hours):		cr = CallReturn()		now = datetime.datetime.now()		#print hours		start = now - datetime.timedelta(hours=hours)		now = int(time.time())		start  =now - hours*3600		try:#			rs = AOMData_Gps.objects.filter(ao__id=aoid,#			                                savetime__range=(start,now)#			                                ).order_by('savetime').values()			rs = AOMData_Gps.objects.filter(ao__id=aoid,			                                gpstime__range=(start,now),av=1											).exclude(speed=0).order_by('gpstime').values()			for r in rs:				#r['savetime'] = time.mktime(r['savetime'].timetuple())				self.cvtpoint_gps2map(r)			#print len(rs)			rs = self.dilution_path_by_time(rs,40)			return CallReturn(result={'rs':rs,'aoid':aoid,'module':MediaDataType.GPS}) #		except:			self.getLog().error(traceback.format_exc())			return CallReturn(succ=False,msg=u'系统处理异常!')	def dilution_path_by_time(self,pts,wait=40):		#保留两端两个点，中间的抽取掉		try:			newpts=[]			print len(pts)			if len(pts)<=2:				return pts			h,s = pts[0],pts[ len(pts)-1]			newpts.append( h )			timelen = s['gpstime']-h['gpstime']#			print  'xxx',timelen / wait,timelen,wait			shouldnum = int(timelen / wait)			skipnum = int(len(pts) / shouldnum)#			print 'skipnum:',skipnum,shouldnum,len(pts),timelen#			print h#			print s			c = 0			for n in range(1,len(pts)-1):				if c == skipnum:					newpts.append(pts[n])					c = 0					continue				c+=1			newpts.append( s)			return newpts		except:			traceback.print_exc()		return pts	#获取Aos对象回放跟踪数据	#返回数据包含多种设备module数据，gps，报警，控制、图像等信息	#目前仅仅实现gps数据返回	#这些数据考虑之后进行json编码并进行gzip压缩，flex客户端相应解压缩	def getAoReplayTrackData(self,r,aoids,start,end):		# aoids - []		try:			#print start,end,dir(start),start.tzinfo,start.tzname()			start+= datetime.timedelta(hours=8)			end+=datetime.timedelta(hours=8)			print 'getAoReplayTrackData:',start,end			dist = end - start			if dist.days >=5:				return CallReturn(succ=False,msg=u'查询时间不能超过5天!')			set=[]			for aoid in aoids:				pts=[]				rs = AOMData_Gps.objects.filter(ao__id=aoid,savetime__range=(start,end)).exclude(speed=0).order_by('gpstime').values()				for rr in rs: #转换地图坐标					if rr['lon']*rr['lat'] == 0 :						continue					self.cvtpoint_gps2map(rr)					pts.append(rr)				#这里要添加优化,如果时间过长导致点数过多，需要抽吸掉中间的坐标点				pts = self.dilution_path_by_time(pts)				gps ={'module':MediaDataType.GPS,'data':pts}				aodata = {'aoid':aoid,'tracks':[gps,]}				set.append(aodata)						return CallReturn(result=set) #		except:			self.getLog().error(traceback.format_exc())			return CallReturn(succ=False)				#2011.9.7	#获取ao资源定义数据	def getAoResDef(self,r,aotype):		cr = CallReturn()		try:			cr.result = G_AO_RESDEF[aotype]		except:			pass		return cr 		#创建用户点组	def createUserPointGroup(self,r,g):		#'''		#	g - {name,comment}		#'''		try:			cu = self.__currentUser()			g.name = g.name.strip()			g.comment = g.comment.strip()			cnt = UserPointGroup.objects.filter(name=g.name).count()			if cnt:				return CallReturn(succ=False,msg=u'名称重复!')			dbo = UserPointGroup()			dbo.name = g.name			dbo.user = cu			dbo.comment = g.comment			dbo.save()			return CallReturn()		except:			self.getLog().error(traceback.format_exc())			return CallReturn(succ=False,msg=u'系统处理异常!')		@transaction.commit_manually	def deleteUserPointGroup(self,r,g):		try:			cu = self.__currentUser()			group = UserPointGroup.objects.get(id=g.id)			pts = UserPoint.objects.filter(group__id=g.id)			for pt in pts:				pt.group = None				pt.save()			group.delete()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()		def updateUserPointGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			cnt = UserPointGroup.objects.filter(name__icontains=g.name).exclude(id=g.id).count()			if cnt:				return CallReturn(succ=False,msg=u'组名重复！')			group = UserPointGroup.objects.get(id=g.id)			group.name = g.name			group.comment = g.comment			group.save()			return CallReturn()		except:			return SYSERROR()		def getUserPointGroupList(self,r):		try:			cu = self.__currentUser()			rs = UserPointGroup.objects.filter(user__id=cu.id).order_by('name').values()			return CallReturn(result=rs)		except:			return SYSERROR()	#获取用户留言	def getUserMessageList(self,r,text,start,end):		try:			text = text.strip()			start,end = utils.normalize_querytime2(start,end)			uid = self.getCurrentUser(r).id			rs = UserMessage.objects.filter(user__id=uid,title__icontains=text,			                                time__range=(start,end)).order_by('-time').values()[:200]			utils.add_index(rs)			for r in rs:				r['time'] = utils.formatDateTime(r['time'])				r['replytime'] = utils.formatDateTime(r['replytime'])			return CallReturn(result=rs)		except:			return SYSERROR()	def createUserMessage(self,r,m):		try:			cu = self._getCurrentUser(r)			m.title = m.title.strip()			m.content = m.content.strip()			if not m.title:				return CallReturn(succ=False,msg=u'留言标题不能为空!')			if UserMessage.objects.filter(user__id=cu.id,title = m.title).count():				return CallReturn(succ=False,msg=u'存在相同标题的留言!')			um = UserMessage()			um.user = cu			um.title = m.title			um.content = m.content			um.time = datetime.datetime.now()			um.save()			return CallReturn()		except:			return SYSERROR()	def deleteUserMessage(self,r,id):		try:			UserMessage.objects.get(id=id).delete()			return CallReturn()		except:			return SYSERROR()	def replyUserMessage(self,r,id,text):		try:			m = UserMessage.objects.get(id=id)			m.replytime = datetime.datetime.now()			m.replycontent = text.strip()			m.save()			return CallReturn()		except:			return SYSERROR()	def getNoticeItem(self,r,id=-1,before=True):		"""		id - 通告， -1 - 最近一条通告		before - true - id 向前一条(before)，否则 为id向后一条（next）		"""		try:			rs=[]			if id==-1:				rs = SysNotice.objects.all().order_by('-time').values()[:1]			else:				if before:					rs = SysNotice.objects.filter(id__lt=id).order_by('-id').values()[:1]				else:					rs = SysNotice.objects.filter(id__gt=id).order_by('id').values()[:1]				if not rs: #找不到之前的默认就取当前的					rs = SysNotice.objects.filter(id=id).values()[:1]			item=None			if rs:				item = rs[0]				item['topic'] = item['topic'][:10]				item['content'] =  '('+utils.formatDateTime_ymdhm(item['time'])+")\n" + item['content'] +"\n"			return CallReturn(result=item)		except:			return SYSERROR()	#创建围栏组	def createBarrierGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=false,msg=u'组名称不能为空!')			cnt = TrackBarrierGroup.objects.filter(name__icontains=g.name).count()			if cnt:				return CallReturn(succ=false,msg=u'组名称重复!')			gg = TrackBarrierGroup()			gg.name = g.name()			gg.comment = g.comment			cu = self.__currentUser()			gg.user = cu			gg.save()			return CallReturn()		except:			return SYSERROR()			@transaction.commit_manually	def deleteBarrierGroup(self,r,g):		try:			cu = self.__currentUser()			group = TrackBarrierGroup.objects.get(id=g.id)			brs = TrackBarrier.objects.filter(group=group)			for br in brs:				br.group = None				br.save()			group.delete()			transaction.commit()			return CallReturn()		except:			return SYSERROR()		def updateBarrierGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			cnt = TrackBarrierGroup.objects.filter(name__icontains=g.name).exclude(id=g.id).count()			if cnt:				return CallReturn(succ=False,msg=u'组名重复！')			group = TrackBarrierGroup.objects.get(id=g.id)			group.name = g.name			group.comment = g.comment			group.save()			return CallReturn()		except:			return SYSERROR()		#创建围栏	def createBarrier(self,r,tb):		import geotools		try:			cu = self.__currentUser(r)			tb.name = tb.name.strip()			if not tb.name:				return CallReturn(succ=False,msg=u'围栏名称不能为空!')			dbo = TrackBarrier()			dbo.name = tb.name			print tb.wkt			#修正经纬度点			tb.wkt[0],tb.wkt[1] = geotools.point_m2g(tb.wkt[0] , tb.wkt[1] )			dbo.wkt = string.join( map(str,tb.wkt),',');			dbo.user = cu			dbo.save()			return CallReturn()		except:			return SYSERROR()	def updateBarrier(self,r,tb):		try:			tb.name = tb.name.strip()			if not tb.name:				return CallReturn(succ=False,msg=u'围栏名称不能为空!')			dbo = TrackBarrier.objects.get(id=tb.id)			dbo.name = tb.name			tb.wkt[0],tb.wkt[1] = geotools.point_m2g(tb.wkt[0] , tb.wkt[1] )			dbo.wkt = string.join(map(str,tb.wkt),',');			dbo.save()			return CallReturn()		except:			return SYSERROR()		def deleteBarrier(self,r,bid):		try:			TrackBarrier.objects.get(id=bid).delete()			return CallReturn(result=bid)		except:			return SYSERROR()	def getBarrier(self,r,bid):		try:			rs = TrackBarrier.objects.filter(id = bid ).values()			for r in rs:				r['geo_wkt'] = r['wkt']				wkt = map(float, r['wkt'].split(','))				wkt[0],wkt[1] = geotools.point_g2m(wkt[0],wkt[1])				r['wkt'] = string.join(map(str,wkt),',')			barrier = rs[0]			return CallReturn(result = barrier)		except :			return SYSERROR()	def getBarrierList(self,r,name=''):		try:			name = name.strip()			cu = self.__currentUser(r)			rs = TrackBarrier.objects.filter(name__icontains = name,user__id=cu.id ).values()			for r in rs:				r['geo_wkt'] = r['wkt']				wkt = map(float, r['wkt'].split(','))				wkt[0],wkt[1] = geotools.point_g2m(wkt[0],wkt[1])				r['wkt'] = string.join(map(str,wkt),',')#				print wkt,type(wkt)			utils.add_index(rs)			return CallReturn(result = rs)		except :			return SYSERROR()	#添加围栏到组	@transaction.commit_manually	def addBarrierListIntoGroup(self,r,g,tbs):		try:			self.removeBarrierListIntoGroup(self,r,tbs)			group = TrackBarrierGroup.objects.get(id=g.id)			for tbid in tbs:				tb = TrackBarrier.objects.get(id=tbid)				tb.group = group				tb.save()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()		#从组移除围栏对象	@transaction.commit_manually	def removeBarrierListIntoGroup(self,r,tbs):		try:			for tbid in tbs:				tb = TrackBarrier.objects.get(id=tbid)				tb.group = None				tb.save()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()		#创建访问地理点组	def createVisitedPointGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'组名称不能为空!')			cnt = VisitedPointGroup.objects.filter(name__icontains=g.name).count()			if cnt:				return CallReturn(succ=False,msg=u'组名称重复!')			gg = VisitedPointGroup()			gg.name = g.name()			gg.comment = g.comment			cu = self.__currentUser()			gg.user = cu			gg.save()			return CallReturn()		except:			return SYSERROR()		@transaction.commit_manually	def deleteVisitedPointGroup(self,r,g):		try:			cu = self.__currentUser()			group = VisitedPointGroup.objects.get(id=g.id)			vps = VisitedPointGroup.objects.filter(group=group)			for vp in vps:				vp.group = None				br.save()			group.delete()			transaction.commit()			return CallReturn()		except:			return SYSERROR()		def updateVisitedPointGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			cnt = VisitedPointGroup.objects.filter(name__icontains=g.name).exclude(id=g.id).count()			if cnt:				return CallReturn(succ=False,msg=u'组名重复！')			group = VisitedPointGroup.objects.get(id=g.id)			group.name = g.name			group.comment = g.comment			group.save()			return CallReturn()		except:			return SYSERROR()		@transaction.commit_manually	def addVisitedPointsIntoGroup(self,r,g,vps):		#''' vps - () 地理位置点列表		#'''		try:			self.removeVisitedPointsFromGroup(vps)			group = VisitedPointGroup.objects.get(id=g.id)			for vpid in vps:				vp = VisitedPoint.objects.get(id = vpid)				vp.group = group				vp.save()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()		#组内删除访问地理点	@transaction.commit_manually	def removeVisitedPointsFromGroup(self,r,vps):		try:						vps = VisitedPoint.objects.filter(group = group)			for vp in vps:								vp.group = None				vp.save()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()	def getAsiListOfAo(self,r,aoid):		try:			ao = ActiveObject.objects.get(id=aoid)			rs = ao.alarmsettings.all().order_by('name').values()			for r in rs:				r['actions'] = json.loads(r['actions'])				r['filter'] = json.loads(r['filter'])				self.normalize_asi(r)			utils.add_index(rs)			return CallReturn(result = rs)		except:			return SYSERROR()	def attachAsi(self,r,aoid,asid):		"""			报警配置项绑定ao对象		"""		try:			ao = ActiveObject.objects.get(id=aoid);			asis = AO_UserAlarmSettings.objects.filter(id=asid)			if not asis:				return CallReturn(succ=False,msg=u'指定的报警配置项不存在!')			asi = asis[0]			ao.alarmsettings.add(asi)			#发送报警配置项重新加载的命令#			m = MsgSys_AsiAttachAo_9()#			m['aoid'] = aoid#			m['asid'] = asid#			self.sendCtrlMsg(m)			prx = self.getCtrlServerPrx()			prx = IAlarmServicePrx.createWithProxy(prx)			prx.addItem(aoid,asid)		except :			return SYSERROR()		return CallReturn()	def detachAsi(self,r,aoid,asid):		"""			报警配置项绑定ao对象		"""		try:			ao = ActiveObject.objects.get(id=aoid);			asi = AO_UserAlarmSettings.objects.get(id=asid)			ao.alarmsettings.remove(asi)			#发送报警配置项重新加载的命令#			m = MsgSys_AsiDetachAo_9()#			m['aoid'] = aoid#			m['asid'] = asid#			self.sendCtrlMsg(m)			prx = self.getCtrlServerPrx()			prx = IAlarmServicePrx.createWithProxy(prx)			prx.removeItem(aoid,asid)		except :			return SYSERROR()		return CallReturn()	def createAsi(self,r,asi,pwd=''):		"""			报警配置项绑定ao对象		"""		try:			asi.name = asi.name.strip()			if not asi.name:				return CallReturn(succ=False,msg=u'名称不能为空!')			if not asi.actions:				return CallReturn(succ=False,msg=u'报警触发动作为空!')			filter={}			if asi.filter.time.timerange:				s,e = asi.filter.time.timerange				s,e = utils.normalize_querytime2(s,e)				asi.filter.time.timerange = utils.mk_timestamp(s),utils.mk_timestamp(e)			filter['suppress_duration'] = asi.filter.suppress_duration			filter['suppress_wait'] = asi.filter.suppress_wait			timeval={'timerange':asi.filter.time.timerange,			         'weekdays':asi.filter.time.weekdays,			         'daytimes':asi.filter.time.daytimes}			filter['time'] =timeval			params = []			for p in asi.filter.params:				item={'name':p.d.name,'param':p.d.param}				params.append(item)			filter['params'] = params			asi.filter = filter			actions=[]			for act in asi.actions:				item ={'type':act.d.type,'times':act.d.times,				       'freq':act.d.freq,				       'params':{'tolist':act.d.params.tolist,				                 'content':act.d.params.content}					}				actions.append(item)			asi.actions = actions			cu = self.__currentUser(r)			item = AO_UserAlarmSettings()			item.name = asi.name			item.enable = asi.enable			item.user = cu#			item.type = ''			item.creatime = datetime.datetime.now()			item.actions = json.dumps(asi.actions)			item.filter = json.dumps(asi.filter)#			print item.actions#			print item.filter			item.save()			return CallReturn(result = item.id)		except :			return SYSERROR()	@transaction.commit_manually	def deleteAsi(self,r,asid,pwd=''):		"""			报警配置项绑定ao对象			删除asi将删除与之相关的ao关联关系		"""		try:			sql= "select activeobject_id as aoid from giscore_activeobject_alarmsettings where ao_useralarmsettings_id=%s"%asid			cur = connection.cursor()			cur.execute(sql)			rs = dbconn.fetchallDict(cur)			sql="delete from giscore_activeobject_alarmsettings where ao_useralarmsettings_id=%s  "%(asid)			cur = connection.cursor()			cur.execute(sql)			AO_UserAlarmSettings.objects.get(id=asid).delete()			transaction.commit()			#通知报警服务器删除报警配置项			prx = self.getCtrlServerPrx()			prx = IAlarmServicePrx.createWithProxy(prx)			for r in rs:#				m = MsgSys_AsiDetachAo_9()#				m['aoid'] = r['aoid']#				m['asid'] = asid#				self.sendCtrlMsg(m)				prx.removeItem(r['aoid'],asid)		except :			transaction.rollback()			return SYSERROR()		return CallReturn()	def updateAsi(self,r,asi,pwd=''):		"""			报警配置项绑定ao对象		"""		try:			asi.name = asi.name.strip()			if not asi.name:				return CallReturn(succ=False,msg=u'名称不能为空!')			if not asi.actions:				return CallReturn(succ=False,msg=u'报警触发动作为空!')			filter={}			if asi.filter.time.timerange:				s,e = asi.filter.time.timerange				s,e = utils.normalize_querytime2(s,e)				asi.filter.time.timerange = utils.mk_timestamp(s),utils.mk_timestamp(e)			filter['suppress_duration'] = asi.filter.suppress_duration			filter['suppress_wait'] = asi.filter.suppress_wait			timeval={'timerange':asi.filter.time.timerange,			         'weekdays':asi.filter.time.weekdays,			         'daytimes':asi.filter.time.daytimes}			filter['time'] =timeval			params = []			for p in asi.filter.params:				item={'name':p.d.name,'param':p.d.param}				params.append(item)			filter['params'] = params			asi.filter = filter			actions=[]			for act in asi.actions:				item ={'type':act.d.type,'times':act.d.times,				       'freq':act.d.freq,				       'params':{'tolist':act.d.params.tolist,				                 'content':act.d.params.content}				}				actions.append(item)			asi.actions = actions			cu = self.__currentUser(r)			item = AO_UserAlarmSettings.objects.get(id = asi.id)			item.name = asi.name			item.enable = asi.enable			#item.user = cu#			item.type = ''			#item.creatime = datetime.datetime.now()			item.actions = json.dumps(asi.actions)			item.filter = json.dumps(asi.filter)			item.save()#			改变asi必须通知alarmserver重新加载asi监控项			sql= "select activeobject_id as aoid from giscore_activeobject_alarmsettings where ao_useralarmsettings_id=%s"%asi.id			cur = connection.cursor()			cur.execute(sql)			rs = dbconn.fetchallDict(cur)			prx = self.getCtrlServerPrx()			prx = IAlarmServicePrx.createWithProxy(prx)			for r in rs:#				m = MsgSys_AsiDetachAo_9()#				m['aoid'] = r['aoid']#				m['asid'] = asi.id#				self.sendCtrlMsg(m)				prx.removeItem(r['aoid'],asi.id)			for r in rs:#				m = MsgSys_AsiAttachAo_9()#				m['aoid'] = r['aoid']#				m['asid'] = asi.id#				self.sendCtrlMsg(m)				prx.addItem(r['aoid'],asi.id)		except :			return SYSERROR()		return CallReturn()	def getAsiList(self,r,name=''):		try:			cu = self.__currentUser(r)			rs = AO_UserAlarmSettings.objects.filter(name__icontains = name, user__id = cu.id).order_by('name').values()			for r in rs:				r['name'] = r['name'].strip()				r['actions'] = json.loads(r['actions'])				r['filter'] = json.loads(r['filter'])				self.normalize_asi(r)			utils.add_index(rs)			return CallReturn(result=rs)		except :			return SYSERROR()	def normalize_asi(self,asi):		tr = asi['filter']['time']['timerange']		if tr:			s,e = map(lambda x:x-3600*8,tr) #需格式化成utc时间			e-=1			asi['filter']['time']['timerange'] = map(utils.mk_datetime,(s,e))	def getAsiInfo(self,r,asid):		try:			rs = AO_UserAlarmSettings.objects.filter(id = asid).values()			for r in rs:				r['name'] = r['name'].strip()				r['actions'] = json.loads(r['actions'])				r['filter'] = json.loads(r['filter'])				self.normalize_asi(r)			return CallReturn(result=rs[0])		except :			return SYSERROR()	#据经纬度坐标计算网格索引	def __calcGridPosition(self,lon,lat):		return (0,0)		#创建用户点对象	def createUserPoint(self,r,g):		try:			cu = self.__currentUser()			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'名称不能为空!')			rs = UserPointGroup.objects.filter(id=g.group) #组编号			grp = None			if rs:				grp = rs[0]			up = UserPoint()			up.name = g.name[:20]			up.type = g.type			up.lon = g.lon			up.lat = g.lat			up.wkt = ''			up.creatime = datetime.datetime.now()			up.user = cu			up.group = grp						up.grid_x,up.grid_y = self.__calcGridPosition(g.lon,g.lat)			up.res_s = g.res_s			up.res_e = g.res_e			up.comment = g.comment			up.save()			return CallReturn()		except:			return SYSERROR()	def deleteUserPoint(self,r,p):		try:			up = UserPoint.objects.get(id=p.id)			up.delete()			return CallReturn()		except:			return SYSERROR()			def updateUserPoint(self,r,p):		try:			p.name = p.name.strip()			p.comment = p.comment.strip()			if not p.name:				return CallReturn(succ=False,msg=u'名称不能为空!')			rs = UserPointGroup.objects.filter(id=p.group) #组编号			grp = None			if rs:				grp = rs[0]			up = UserPoint.objects.get(id=p.id)			up.name = p.name[:20]			up.type = p.type			up.lon = p.lon			up.lat = p.lat						up.group = grp						up.grid_x,up.grid_y = self.__calcGridPosition(g.lon,g.lat)			up.res_s = g.res_s			up.res_e = g.res_e			up.comment = g.comment			up.save()			return CallReturn()		except:			return SYSERROR()		#用户地理点添加到组,一个点只能隶属于一个group	@transaction.commit_manually	def addUserPointsIntoGroup(self,r,g,ptids):		try:			self.removeUserPointsFromGroup(self,r,ptids)			group = UserPointGroup.objects.get(id = g.id)			for ptid in ptids:				upt = UserPoint.objects.get(id=ptid)				upt.group = group				upt.save()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()		#从组内删除用户点	@transaction.commit_manually	def removeUserPointsFromGroup(self,r,ptids):		# ptids - 用户点记录编号列表		try:			for ptid in ptids:				up = UserPoint.objects.get(id=ptid)				up.group = None				up.save()			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()			#更改坐标点(用户拖动地理点)	def updateUserPointXY(self,r,upid,x,y):		try:			up = UserPoint.objects.get(id=upid)			up.lon = x			up.lat = y			up.save()			return CallReturn()		except:			return SYSERROR()		#获取用户点列表	#wms客户程序按照tile规格的地理区域来请求用户点列表	def getUserPointList(self,r,res,rc):		#'''		#res - 当前显示地理精度		#rc -  地理坐标矩形(x,y,width,height)		#简单化处理，直接从userpoint表获取point对象		#'''		try:			cu = self.__currentUser()			lb,rt = GridRangeByGeoRect(rc)			rs = UserPoint.objects.filter(user=cu)			result=[]			#过滤合法的区域的对象			for r in rs:				if r.lon >=rc[0] and r.lon < rc[0]+rc[2] and \					r.lat >= rc[1] and r.lat < rc[1]+rc[3]:					result.append(r)			return CallReturn(result = result)					except:			return SYSERROR()			#返回当前用户信息	def _getCurrentUser(self,r):		return self.__currentUser(r)			def createAoAppGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'组名不能为空!')			cnt = AO_AppGroup.objects.filter(name=g.name).count()			if cnt:				return CallReturn(succ=False,msg=u'存在重复的组名!')			gg = AO_AppGroup()			gg.name = g.name			gg.comment = g.comment			gg.user = self._getCurrentUser(r)			gg.save()		except:			return SYSERROR()		def deleteAoAppGroup(self,r,g):		try:			o = AO_AppGroup.objects.get(id=g.id)			o.aos.clear()			o.delete()			return CallReturn()		except:			return SYSERROR()		def updateAoAppGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'组名不能为空!')						cnt = AO_AppGroup.objects.filter(name__icontains=g.name).exclude(id=g.id).count()			if cnt:				return CallReturn(succ=False,msg=u"存在相同的组名!")						gg = AO_AppGroup.objects.get(id=g.id)			gg.name = g.name			gg.comment = g.comment			gg.save()			return CallReturn()		except:			return SYSERROR()		#添加ao到组,放置重复添加	def addAoListIntoAppGroup(self,r,g,aos):		#'''		#g - {id,}		#'''		try:			cu = self.__currentUser()			cnt= AO_AppGroup.objects.filter(id=g.id,user__id=cu.id) #当前用户的appgroup			if not cnt:				return CallReturn(succ=False,msg=u'组不存在!')						o = AO_AppGroup.objects.get(id=g.id)			for aoid in aos:				ao = ActiveObject.objects.get(id=aoid)				if o.aos.filter(id=aoid).count ==0:					o.aos.add(ao)			return CallReturn()		except:			return SYSERROR()		@transaction.commit_manually	def removeAoListFromAppGroup(self,r,g,aos):		try:			o = AO_AppGroup.objects.get(id=g.id)			for id in aos:				set = o.aos.filter(id=id)				o.aos.remove(set)			o.save()			transaction.commit()			return CallReturn()		except:			return SYSERROR()		#查询停车报告	#def queryAoStopRecords(self,r,)		#查询ao行驶里程列表	def getReport_AoMile(self,r,name,start,end):		pass		#当日行驶里程	def getReport_AoMile_Today(self,r,name):		pass	#当月日里程统计 (1-月底日)	def getReport_AoMile_DaysOfCurrMonth(self,r,name):		pass	#当月里程统计	def getReport_AoMile_CurrMonth(self,r,name):		pass		#查询超速列表	def getReport_AoSpeedOver(self,r,name,start,end):		pass		#查询停车列表	def getReport_AoStop(self,r,name,start,end):		pass		#当日停车记录(开始时间、结束时间、时常、地理位置)	def getReport_AoStop_Today(self,r,name):		pass		#当前ao运行状态列表	#返回在线离线比例	def getAoCurrentStatus(self,r,name):		pass		#查询报警记录 	def getReport_AoAlarm(self,r,name,start,end):		pass		def __getAoMiles_Days(self,aoid,s,e):		'''			必须考虑如果里程被清除之后，连续累加的行驶里程		'''		h = None		t = None		miles = 0#		rs = AOMData_Gps.objects.filter(ao__id=aoid,savetime__range=(s,e)).order_by('savetime')#		if len(rs)<2:#			return 0#		start = 0##		for i,r in enumerate(rs,1):#			p = rs[i-1]#			if r.miles < p.miles:#				miles+= p.miles - rs[start].miles#				start = i#		miles += rs[len(rs)-1].miles - rs[start].miles#		return round(miles,3)		rs = AOMData_Gps.objects.filter(ao__id=aoid,savetime__range=(s,e)).order_by('savetime')[:1]		if rs:			h = rs[0]		rs = AOMData_Gps.objects.filter(ao__id=aoid,savetime__range=(s,e)).order_by('-savetime')[:1]		if rs:			t = rs[0]		if h and t:			miles = t.miles - h.miles		miles = round(miles,3)		if miles <0:			miles = 0		return miles#	获取报警条目	def getAoReport_AlarmLogs(self,r,name,start,end):		"""			name - ao name		"""		try:			name = name.strip()			cu = self._getCurrentUser(r)			start,end = utils.normalize_querytime2(start,end)			now = datetime.datetime.now()			aos = cu.aos.filter(name__icontains=name).order_by('name')			rs=[]			for ao in aos:				logs = AO_AlarmLog.objects.filter(ao__id=ao.id,time__range=(start,end)).order_by('-time')[:200].values()				for log in logs:					log['aoname'] = ao.name					log['time_s'] = utils.formatDateTime(log['time'])					rs.append(log)			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()#	报警执行动作列表	def getAoReport_AlarmActions(self,r,alarmid):		"""			alarmid - 报警记录编号		"""		print dir(gisbase)		try:			rs = AO_AlarmActionLog.objects.filter(alarmlog__id=alarmid).order_by('-time').values()			for r in rs:				r['time_s'] = utils.formatDateTime(r['time'])				r['name'] = TaskActionType_t.NAMES.get(r['type'],r['type'])			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()	def getAoReport_Miles(self,r,name,type,start,end,aggr=True,export=False):		"""			type : 1- tody,2-month,3 - timerange			aggr : 是否聚合数据			export: 是否导出文件			必须考虑如果里程被清除之后，连续累加的行驶里程		"""		try:			name = name.strip()			cu = self._getCurrentUser(r)			result = []			if type == 1: # by today				aos = cu.aos.filter(name__icontains=name).order_by('name')				for ao in aos:					n = datetime.datetime.now()					s = datetime.datetime(n.year,n.month,n.day)					e = s + datetime.timedelta(days=1)					miles = self.__getAoMiles_Days(ao.id,s,e)					attr={'name':ao.name,'time_s':utils.formatDateTime_ymd2(s),'days':1,'miles':miles}					result.append(attr)				utils.add_index(result)				return CallReturn(result=result)			if type == 2: # by months				now = datetime.datetime.now()				aos = cu.aos.filter(name__icontains=name).order_by('name')				for ao in aos:					h = None					t = None					s,days = calendar.monthrange(now.year,now.month)					#days = e - s + 1					s = datetime.datetime(now.year,now.month,1)					e = datetime.datetime(now.year,now.month,days)					e = e + datetime.timedelta(days=1)					if aggr: #聚合						miles = self.__getAoMiles_Days(ao.id,s,e)						e = e - datetime.timedelta(days=1)						time_s = utils.formatDateTime_ymd2(s) + ' - ' + utils.formatDateTime_ymd2(e)						attr={'name':ao.name,'time_s':time_s,'days':days,'miles':miles}						result.append(attr)					else: #打印出当前月的每一天						start,end = calendar.monthrange(now.year,now.month)						for n in range(start,end+1):							s = datetime.datetime(now.year,now.month,n)							e = s + datetime.timedelta(days=1)							miles = self.__getAoMiles_Days(ao.id,s,e)							attr={'name':ao.name,'time_s':utils.formatDateTime_ymd2(s),'days':1,'miles':miles}							result.append(attr)				utils.add_index(result)				return CallReturn(result=result)			if type == 3 : # by time range				if start == None or end == None:					return CallReturn(succ=False,msg=u'请设置查询时间范围!')				delta = end  - start				if delta.days >100:					return CallReturn(succ=False,msg=u'查询时间最大支持100天!')				start,end = utils.normalize_querytime2(start,end)				now = datetime.datetime.now()				aos = cu.aos.filter(name__icontains=name).order_by('name')				for ao in aos:					h = None					t = None					s = start					e = end					if aggr: #聚合						days = e - s						days = days.days						miles = self.__getAoMiles_Days(ao.id,s,e)						e = e - datetime.timedelta(days=1)						time_s = utils.formatDateTime_ymd2(s) + ' - ' + utils.formatDateTime_ymd2(e)						attr={'name':ao.name,'time_s':time_s,'days':days,'miles':miles}						result.append(attr)					else: #打印						days = e - s						days = days.days						for n in range(days):							s = start + datetime.timedelta(days=n)							e = s + datetime.timedelta(days=1)							miles = self.__getAoMiles_Days(ao.id,s,e)							attr={'name':ao.name,'time_s':utils.formatDateTime_ymd2(s),'days':1,'miles':miles}							result.append(attr)				utils.add_index(result)				return CallReturn(result=result)		except :			return SYSERROR()	#更改当前用户的登录密码 	def changePasswd(self,r,oldpwd,newpwd):		pass	#修改当前用户信息	def changeUserInfo(self,r,u):		pass		#开始ao监听	def ctrlset_startListen(self,r,aoid,phone=''):		#'''		#	aoid - 设备ao编号		#	phone - 设备拨打电话, ''则采用当前用户的电话		#'''		try:			phone = phone.strip()			if not phone:				u = self.__currentUser()				phone = u.phone			prx = self.getCtrlServerPrx()			prx = IAoModuleClientPrx.createWithProxy(prx)			prx.openListen(aoid,phone)		except:			self.getLog().error(traceback.format_exc())			return CallReturn(succ=False,msg=u'系统处理异常!')		return CallReturn ()	def ctrlset_reset(self,r,aoid):		"""			设备复位		"""		try:			prx = self.getCtrlServerPrx()			prx = IAoModuleClientPrx.createWithProxy(prx)			prx.reset(aoid)		except:			return SYSERROR()		return CallReturn()	def ctrlset_clearMiles(self,r,aoid):		"""			设备复位		"""		try:			prx = self.getCtrlServerPrx()			prx = IAoModuleClientPrx.createWithProxy(prx)			prx.clearMiles(aoid,0)		except:			return SYSERROR()		return CallReturn()#	def getUserParameters(self,r):#		"""#		当前用户信息#		@returns: {user,alarms,syssettings}#		"""#		rst={}#		cu = self.getCurrentUser(r)#		try:#			u = AppUser.objects.get(id=cu.id)#			rst['user'] = u#			rst['alarms'] =None#			rst['sysparams'] =None##			return CallReturn(result=rst)#		except:#			traceback.print_exc()#			return CallReturn(succ=False)	def getUserInfo(self,r):		"""		当前用户信息		@returns: {user,alarms,syssettings}		"""		rst={}		u = self.__currentUser(r)		try:			u = utils.hashobject(u)			u['delta'] = utils.loadjson_s(u['delta'])			print u			return CallReturn(result=u)		except:			traceback.print_exc()			return CallReturn(succ=False)	def updateUserInfo(self,r,u):		try:			cu = self.__currentUser(r)			if cu.passwd!=u.passwd.strip():				return CallReturn(succ=False,msg=u'修改密码错误!')			cu.name = u.name.strip()[:20]			#cu.sid = u.sid.strip()[:20]			if u.newpasswd.strip():				cu.passwd = u.newpasswd.strip()[:20]			cu.address = u.address.strip()[:200]			cu.zipcode = u.zipcode.strip()[:20]			cu.phone = u.phone.strip()[:30]			cu.contactman = u.contactman.strip()[:30]			if u.delta:				cu.delta = json.dumps(u.delta)			cu.save()			#cu = utils.hashobject(cu)			#cu['delta'] = u.delta			return CallReturn(result=u)		except:			return SYSERROR()	def setUserParams(self,r,params):		'''存储进delta字段			params - object对象  new Object()		'''		try:			print 'setUserParms:',params			cu = self.__currentUser(r)			h = utils.loadjson_s(cu.delta)			#params = utils.hashobject(params)			for name,value in params.items():				h[name.strip()] = value			cu.delta = json.dumps(h)			print cu.delta,h			cu.save()			return CallReturn()		except:			return SYSERROR()	def getUserParams(self,r):		'''			return : hash={}		'''		try:			cu = self.__currentUser(r)			h = utils.loadjson_s(cu.delta)			return CallReturn(result=h)		except:			return SYSERROR()#	def updateUserParameters(self,r,params):#		"""#		@params: { passwd,user,alarms,sysparams}##		"""#		try:#			cu = self.getCurrentUser(r)#			u = AppUser.objects.get(id=cu.id)#			if u.passwd!=params['passwd']:#				return CallReturn(succ=False,msg=u'修改密码错误!')##			uu = params['user']#			if uu:#				u.name = uu.name.strip()[:20]#				u.passwd = uu.newpasswd.strip()[:20]#				u.address = uu.address.strip()[:200]#				u.zipcode = uu.zipcode.strip()[:20]#				u.phone = uu.phone.strip()[:30]#				u.contactman = uu.contactman.strip()[:30]#			alarms = params['alarms']#			if alarms:#				pass#			sysparams = params['alarms']#			if sysparams:#				pass#			u.save()#			return self.getUserParameters(self,r);#		except:#			traceback.print_exc()#			return CallReturn(succ=False)	def queryUserLoginList(self,r,start,end):		"""		查询用户登录历史记录		"""		try:			start,end = utils.normalize_querytime2(start,end)			u = self.__currentUser(r)			rs = UserLoginLog.objects.\				filter(login=u.sid,time__range=(start,end),succ=True,usertype=1).\				order_by('-time').values()[:200]			idx=1			for r in rs:				r['idx'] = idx				idx+=1				r['time_str']= utils.formatDateTime(r['time'])			return CallReturn(result=rs)		except:			traceback.print_exc()			return CallReturn(succ=False)#	创建报警配置项	def createAlarmSettings(self,r,aset):		try:			pass		except:			return SYSERROR()#	删除报警配置项	def deleteAlarmSettings(self,r,aset):		try:			pass		except:			return SYSERROR()#   更新报警配置项	def updateAlarmSettings(self,r,aset):		try:			pass		except:			return SYSERROR()#################################################################	#Q_GIS_REQUEST_POINT_TYPE_	def gisPositionQuery_1(self,r,xy):		#'''		#function:	gisPositionQuery_1		#	根据坐标点查询xy所在地理位置		#params:		#	xy - {x,y}  地址位置		#return:		#	返回城市->区县->乡镇(街道)->道路->标志建筑物		#		#实现:		#	处理地图时 *_serial表内的数据都是被网格存储了，可以执行快速定位到具体的某个网格		#	由于点位置可能出于网格边缘,所以点附近的4个网格要参与检索		#	检索点比较简单，直接换算距离即可		#	道路同样处理，采用geos的算法计算到点的距离,没有路名的道路不参与处理		#	道路由多个线段组成,判别距离的时候进入每一个道路对象，分别计算处理每一个线段与位置点的距离					#'''		pass					# gisQuery - 查询gis对象信息	def gisGeoObjectQuery(self,r,text,geotype,city,pg=None):		# text  - 查询输入文本		# geotype -  1 poi; 2 road ; 3 所有类型		# city -  城市名称 , ''表示检索所有城市		# pg - 分页控制				try:			print text,geotype,city			cur = self.idxdb.cursor()			sql = "select * from geoindex where "			params =[]			where =''			if city:								where+=" city=? "				params.append(city)							if geotype !=0x03:				if where:					where+= " and "				where+=" geotype=?"				params.append(geotype)						if text:				d = text.strip().split(' ')				d = map(string.strip,d)				text = '%'+string.join(d,'%')+'%'				where+=" and name like ? "				params.append(text)			sql+=where + " limit 100"			#sql+= " order by name limit 100"			print sql			#return CallReturn(succ=False)					cur.execute(sql,params)			set=[]			r = cur.fetchone()			while r:				x={}				x['city'] = CHINA_CITY[r[0]]				x['x'] = r[1]				x['y'] = r[2]				x['xy'] = "%.4f,%.4f"%(r[1],r[2])				x['name'] = r[3]				x['kind'] = r[4]	#类型				x['geotype'] = r[6]				set.append(x)				r = cur.fetchone()			print 'result count:',len(set)			return CallReturn(result=set)		except:			print traceback.format_exc().decode('utf8')			return CallReturn(succ=False,msg=u'system error')	def getCtrlServerPrx(self):		mq = 'mq_cts_1'		prx = ICtrlServicePrx.createWithEpName(mq)		return#################################################################def initRights():	passdef initConfigs():	SystemGlobalSettings.objects.all().delete()	for k in system_parameters.keys():		item = system_parameters[k]		param = SystemGlobalSettings()				param.name = k		param.value = str(item[0])		param.brief= str(item[1])		param.save()	passdef init():	initConfigs()	if __name__=='__main__':#	init()	pass