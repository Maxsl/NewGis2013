# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,datetimeimport weberroros.environ['DJANGO_SETTINGS_MODULE'] = 'settings'#导入当前类库路径 		sys.path.append(os.path.dirname(__file__)) 				ID_SYSTEM_COPERATION = 1 #公司会员数据库编号(初始化数据库的时候第一条创建记录)SYSUSER_ROOT='root'SYSUSER_ROOT_PASSWD='1'		class CallReturn:	def __init__(self,succ =True,msg='',result=None,code=weberror.ERROR_OK):		self.succ = succ		self.errcode = code  #没错误 		self.msg = msg		if not msg and succ==False:			self.msg = u'系统异常'		self.result = result  #携带任何数据返回s		#appuser 系统用户class CurrentAppUser:	def __init__(self,id=0):		self.id = id		#用户数据库编号 		self.r = None 	#数据库记录		self.sid = 'tiger' 	#用户登录编号		self.passwd=''		#操作用户参数定义'''delta={env,save_env}env:{	map:{lonlat,zoomlevel}  坐标和地图缩放级别	}save_env:true/false, 保存用户现场'''	QUERY_BY_LOGIN = 0QUERY_BY_NAME = 1SEX_MALE =1 #男SEX_FEMALE=0 #女MARKET_POSITION_LEFT = 1 #市场左区MARKET_POSITION_RIGHT = 2CURRENTY_PER_BACKPOINT = 500 #点位货币 #登录日志 用户类型RIGHTS={}LOGIN_MALL_ADMIN = 0	#商场管理员(财务、管理)LOGIN_MALL_OPERATOR = 1	#商场客服人员LOGIN_ROLE_MEMBER = 2	#会员对象LOGIN_ROLE_ADMIN = 3	#系统管理对象#ao对象控制类型# CMD - SERVER -> AO# RESP - AO -> SERVER AOCTRL_CMD_SHAKE_ACK =1 	#应答握手信号信息AOCTRL_CMD_REG_ACK= 2	#终端注册响应消息AOCTRL_CMD_SAMPLING_TIMESET = 3 	#等时连续回传设置AOCTRL_CMD_ALARM_ACK = 4	#应答报警消息AOCTRL_CMD_NAMED = 5 	#一次点名消息AOCTRL_CMD_SPEEDSET = 6 #设置车速上下限AOCTRL_CMD_POWER_ONOFF = 7 #电路控制信号AOCTRL_CMD_OIL_ONOFF = 8  #油路控制信号AOCTRL_CMD_REBOOT = 9 		#控制设备重启消息AOCTRL_CMD_ACC_ON_TIME = 10 #设置ACC开发送数据间隔AOCTRL_CMD_ACC_OFF_TIME = 11 #设置ACC关发送数据间隔AOCTRL_CMD_BARRIER_SET = 12 	#设置电子围栏消息AOCTRL_CMD_GETLOCATION = 13 		#应答获取终端所在位置消息AOCTRL_CMD_LISTEN_START = 14 		#监听命令AOCTRL_CMD_COMMADDR_SET = 15 	#设置终端IP地址和端口AOCTRL_CMD_APN_SET = 16			# 设置APN消息AOCTRL_CMD_GET_VERSION = 17 	# 读取终端版本消息AOCTRL_CMD_CLEAR_ALARMS = 18 	#取消所有报警消息AOCTRL_CMD_CLEAR_MILES = 19 	#里程清零消息AOCTRL_CMD_INIT_MILES = 20 		#里程初始化消息AOCTRL_CMD_UPDATING = 21 		#启动升级消息AOCTRL_CMD_SHACK_REQ =31 #握手信号消息AOCTRL_CMD_REG_REQ =32 	#终端注册信息AOCTRL_CMD_SAMPLING_TIMESET_ACK = 32 #应答等时连续回传设置AOCTRL_CMD_ALARM_REQ = 33 		#警报消息AOCTRL_CMD_NAMED_ACK = 34 		#应答点名信息AOCTRL_CMD_SIMPLING_GPSDATA = 35 		#等时连续回传消息AOCTRL_CMD_SIMPLING_END = 36 	#连续回传结束消息AOCTRL_CMD_SPEEDSET_ACK = 37 	#应答设置车速上下限AOCTRL_CMD_POWERCTRL_ACK = 38   #应答电路控制AOCTRL_CMD_OILCTRL_ACK = 39 	#应答油路控制AOCTRL_CMD_REBOOT_ACK = 40 		#应答设备重启消息AOCTRL_CMD_ACCON_TIMESET_ACK = 41 #应答设置ACC开发送数据间隔AOCTRL_CMD_ACCOFF_TIMESET_ACK=42 #应答设置ACC关发送数据间隔AOCTRL_CMD_BARRIER_SET_ACK =  43 #应答设置电子围栏消息AOCTRL_CMD_GETLOCATION_ACK = 44  #获取终端所在位置消息AOCTRL_CMD_LISTEN_ACK = 45 		#应答监听命令AOCTRL_CMD_COMMADDR_SET_ACK=46	#应答设置终端IP地址和端口AOCTRL_CMD_APN_SET_ACK=47		#应答设置APN消息AOCTRL_CMD_GETVERSION_ACK=48	#应答读取终端版本消息AOCTRL_CMD_CLEAR_ALARMS_ACK=49	#应答取消所有报警消息AOCTRL_CMD_CLEAR_MILES_ACK=50 	#应答里程清零消息AOCTRL_CMD_UPDATING_ACK = 61 	#应答启动升级消息AOCTRL_CMD_INIT_MILES_ACK = 62	#应答初始化里程消息#ao对象报警类型#获取服务器时间def getServerTime(request):	r = datetime.datetime.now()		return r#检查会话超时def sessionCheck(request):	cr = CallReturn()	return cr	if request.session.get('autherized') !=True:		cr = CallReturn(succ = False,msg=u'登录会话超时，请重新登录!',code=stockerror.ERROR_UNAUTHERIZED)	return cr#def normalizeMoney(money,default=0):	r = default	try:		r = float(money)	except:pass	return r				def formDateTime(dt):	if not dt:		return '-'*10	s = str(dt)	ss = s.split('.')		return ss[0]def nomarlizeDate(dt):	if dt == None:		dt = datetime.datetime.now()	dt = datetime.datetime(dt.year,dt.month,dt.day)	return dtdef normalizeDateRange(st,et):	if st == None:		st = datetime.datetime(2000,1,1)	else:		st = datetime.datetime(st.year,st.month,st.day)		if et == None:		et = datetime.datetime.now()		et = datetime.datetime(et.year,et.month,et.day)	et = et +datetime.timedelta(1)	return st,etdef SYSERROR():	print traceback.format_exc().decode('utf8')	return CallReturn(succ=False,msg=u'系统处理异常!')def PrintObjectProperties(object, spacing=25):      propList = [prop for prop in dir(object) if (not prop.startswith('_') and not callable(getattr(object, prop))) ]    print( "[%s's Property List:]:"%str(object) )    print("\n".join(["%s %s %s" %                     (prop.ljust(spacing),str(type(getattr(object, prop))).ljust(spacing)                      ,  (str(type(getattr(object, prop)))=="<type 'property'>" and getattr(object, prop).__doc__) or getattr(object, prop))                     for prop in propList]) )def PrintObjectMethods(object, spacing=25):      methodList = [method for method in dir(object) if (not method.startswith('_') and callable(getattr(object, method))) ]    print( "[%s's Methods List:]:"%str(object) )    print("\n".join(["%s %s" %                     (method.ljust(spacing),                      getattr(object, method).__doc__)                     for method in methodList]) )#AO对象状态定义G_AO_STATUS_UNKNOWN=0x00 	#未知状态G_AO_STATUS_OFFLINE=0x01	#离线G_AO_STATUS_STOP = 0x02		#停止G_AO_STATUS_NORMAL = 0x03 #工作正常G_AO_STATUS_ALARM = 0x04 	#报警#车辆定义AO_CLASS_VEHICLE = 0AO_VEHICLE_CAR = AO_CLASS_VEHICLE+0x01 #小车AO_VEHICLE_HUOCHE = AO_CLASS_VEHICLE+0x02 #货车AO_VEHICLE_GONGJIAO = AO_CLASS_VEHICLE+0x03 #公交AO_VEHICLE_GONGCHENGCHE=AO_CLASS_VEHICLE+0x04 #工程车AO_VEHICLE_MOTO=AO_CLASS_VEHICLE+0x05 #助动车AO_VEHICLE_BIKE = AO_CLASS_VEHICLE+0x06 # 助动车或自行车AO_CLASS_PEOPLE = 1<<4 #人物或者动物AO_PEOPLE_PERSON = AO_CLASS_PEOPLE+0x01 #人物AO_PEOPLE_DOG = AO_CLASS_PEOPLE+0x02 #宠物#ao对象资源定义#每个ao对象都均有多种状态，每种状态各有图标标志并存储在服务器上，然后运行时的旋转图标#ao对象行为旋转角度和状态通过'/'分隔#旋转角度通过r来控制,car/offline/r/0,car/offline/r/45(90,135,180,225,270,315)G_AO_RESDEF={	AO_VEHICLE_CAR:{'icon':'car'},	AO_VEHICLE_HUOCHE:{'icon':'huoche'}, #火车	AO_VEHICLE_GONGJIAO:{'icon':'gongjiao'}, #公交	AO_VEHICLE_GONGCHENGCHE:{'icon':'gongchengche'}, #	AO_VEHICLE_MOTO:{'icon':'gongchengche'}, #	AO_VEHICLE_BIKE:{'icon':'bike'}, #	AO_PEOPLE_PERSON:{'icon':'person'}, #	AO_PEOPLE_DOG:{'icon':'dog'}, #}	G_AO_ALARM_SPEEDOVER = 0x01 #超速报警#网格看考点G_GRID_ORIGINPOINT = (0,0)G_GRID_CELL_SIZE = (0.01,0.01) #地理网格规格 unit:degreeG_AO_TYPE_1=1G_AO_TYPELIST={	'Hp':{'name':u'','id':G_AO_TYPE_1},}	#设备类型定义 class AoModuleType:	GPS = 1	AUDIO = 2	VIDEO = 3	IMAGE = 4	TEXT = 5	IODATA =6	RAWBLOB = 10	UNDEFINED = 0xff	sysdevlist= {	'sw-k101':{}}G_GRID_ORIGNAL_POINT=(0,0)G_GRID_CELL_SIZE=(0.01,0.005) #网格块规格(度)def GeoPoint2GridIndex(lon,lat):	off = (lon - G_GRID_ORIGNAL_POINT[0], lat - G_GRID_ORIGNAL_POINT[1])	#x = divmode(off[0],G_GRID_CELL_SIZE[0])	x = off[0] // G_GRID_CELL_SIZE[0]	y = off[1] // G_GRID_CELL_SIZE[1]	return map(int,(x,y))#从地理区域计算网格索引范围 (1,1) - (2,3)def GridRangeByGeoRect(grc):	xy1 = GeoPoint2GridIndex(grc[0],grc[1])	xy2 = GeoPoint2GridIndex(grc[0]+grc[2],grc[1]+grc[3])	return (xy1,xy2)#从网格索引获取地理范围def GridIndex2GeoRect(idx):	x = idx[0]*G_GRID_CELL_SIZE[0] + G_GRID_ORIGNAL_POINT[0]	y = idx[1]*G_GRID_CELL_SIZE[1] + G_GRID_ORIGNAL_POINT[1]	return (x,y,G_GRID_CELL_SIZE[0],G_GRID_CELL_SIZE[1])class TaskActionType_t:	Sleep = 'sleep' 	#等待一定时间，单位：秒 , freq - 指定睡眠值	Mail = 'mail'    #发送邮件	SMS = 'sms' 	#发送短信	NAMES={'sms':u'短信通知',	       'mail':u'邮件通知',	       'asi_detach':u'取消报警设防',	       'poweroff':u'切断电源',	       'oiloff':u'断油'	}if __name__=='__main__':	print GeoPoint2GridIndex(121.33,31.45)	print GridRangeByGeoRect( (121.33,31.45,1,2) )	print GridIndex2GeoRect((100,100))	