# -*- coding:utf-8 -*-import sys,os,os.path,time,struct,traceback,threading,datetimefrom xml.dom import getDOMImplementationimport sqlite3import stringimport weberror,webbasefrom sysconfig import *from webbase import *from django.http import *from django.shortcuts import render_to_responsefrom django.db import connectionfrom django.db.models import Sumfrom django.db.models import Avg,Sum,Countfrom django.db import transactionimport utils''''''from  giscore.models import *from gisserver import GisServerglobal serverinstanceclass MediaDataType:		GPS   = 1<<0	AUDIO = 1<<1	VIDEO = 1<<2	IMAGE = 1<<3	TEXT =  1<<4	IODATA = 1<<5	RAWBLOB = 1<<6		COMMAND = 1<<7	#通用命令	ALARM =  1<<8  #报警信息	UNDEFINED = 0xffclass GisAdmin:	def __init__(self):				try:			pass #self.idxdb = sqlite3.connect('d:/geoindex.db3')		except:			traceback.print_exc()			pass		def init(self):		pass		_hinstance = None	@classmethod	def instance(CLS):		if not GisAdmin._hinstance:			GisAdmin._hinstance = GisAdmin()		return GisAdmin._hinstance			def login(self,r,user,passwd):		#'''管理员登录		# usertype - 用户类型   LOGIN_MALL_ADMIN | LOGIN_MALL_OPERATOR 默认为管理员		#@return: {userid,rights}		# 商场管理员登录名  = 商场名-admin,		# 商场客户登录名 必须添加商场登录名为前缀 商场名-登录名		# 		#'''	#	self.logout(r,0)		cr = CallReturn(succ=False,msg=u'您提供的用户名或密码错误!')		try:			d = utils.loadjson('root.txt')			if not d:				CallReturn(succ=False,msg=u'系统验证错误!')			print d			for ad in d['administrators']:				if ad['user'] == user and ad['passwd']==passwd:					return CallReturn()			return cr		except:			SYSERROR()		return cr##		if user.strip()=='' or passwd.strip()=='':#			return cr#		o = AdminUser.objects.filter(login=username,passwd=passwd)#		log = LoginLog(login=username,passwd=passwd,#					   name='',succ = False,#					   time=datetime.datetime.now(),#					   ipaddr=str(r.META.get('REMOTE_ADDR')),#					   region='',#					   usertype=2)#		if identcode!= r.session.get('authkey','k'*10):#			cr = CallReturn(succ = False,msg=u'图像验证码错误!')#			o = None#		if o:#			m = o[0]#			r.session['autherized'] =True#			r.session['userid'] = m.id#			r.session['userlogin'] = m.login#			r.session['username'] = m.name#			r.session['mall_id'] = None##			r.name = m.name#			#写入登录日志#			log.succ = True#			cr.succ = True#			cr.msg = ''#			cr.result={'userid':m.id,'rights':m.rights}#		else:#			r.session['autherized'] = False#		log.save()#		return cr		#退出系统	def logout(self,r):		r.session['autherized'] = False		def getCurrentUser(self,r=None):		cr = CallReturn()		u ={'id':1,'sid':'tiger','name':u'主管','clientid':1}		cr.result = u			return cr	#创建系统设备组	def createAoSysGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'组名不能为空!')			cnt = AO_SysGroup.objects.filter(name=g.name).count()			if cnt:				return CallReturn(succ=False,msg=u'存在重复的组名!')			gg = AO_SysGroup()			gg.name = g.name			gg.comment = g.comment			gg.save()			return CallReturn()		except:			return SYSERROR()	def createAoUserGroup(self,r,uid,g):		"""		创建设备用户组		{name,}		"""		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			u = AppUser.objects.get(id=uid)			if not g.name:				return CallReturn(succ=False,msg=u'组名不能为空!')			cnt = AO_AppGroup.objects.filter(name=g.name).exclude(user__id=uid).count()			if cnt:				return CallReturn(succ=False,msg=u'存在重复的组名!')			gg = AO_AppGroup()			gg.name = g.name			gg.comment = g.comment			gg.user = u			gg.save()			return CallReturn()		except:			return SYSERROR()	#删除ao组	def deleteAoUserGroup(self,r,gid):		try:			o = AO_AppGroup.objects.get(id=gid)			if o.aos.all().count():				return CallReturn(succ=False,msg=u'组存在设备，无法直接删除!')			AO_AppGroup.objects.filter(id=gid).delete()			print  'del ok',gid			return CallReturn()		except:			return SYSERROR()	def updateAoUserGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'组名不能为空!')			cnt = AO_AppGroup.objects.filter(name__icontains=g.name).exclude(id=g.id).count()			if cnt:				return CallReturn(succ=False,msg=u"存在相同的组名!")			gg = AO_AppGroup.objects.get(id=g.id)			gg.name = g.name			gg.comment = g.comment			gg.save()			return CallReturn()		except:			return SYSERROR()	#删除ao组	def deleteAoSysGroup(self,r,gid):		try:			o = AO_SysGroup.objects.get(id=gid)			if o.aos.all().count():				return CallReturn(succ=False,msg=u'组存在设备，无法直接删除!')			AO_SysGroup.objects.filter(id=gid).delete()			return CallReturn()		except:			return SYSERROR()			def updateAoSysGroup(self,r,g):		try:			g.name = g.name.strip()			g.comment = g.comment.strip()			if not g.name:				return CallReturn(succ=False,msg=u'组名不能为空!')						cnt = AO_SysGroup.objects.filter(name__icontains=g.name).exclude(id=g.id).count()			if cnt:				return CallReturn(succ=False,msg=u"存在相同的组名!")						gg = AO_SysGroup.objects.get(id=g.id)			gg.name = g.name			gg.comment = g.comment			gg.save()			return CallReturn()		except:			return SYSERROR()		def addAoIntoSysGroup(self,r,gid,aoid):		try:			o = AO_SysGroup.objects.get(id=gid)			ao = ActiveObject.objects.get(id=aoid)			o.aos.add(ao)			#for id in aos:			#	cnt = o.aos.filter(id=id).count()			#	if cnt:			#		continue			#	ao = ActiveObject.objects.get(id=id)			#	o.aos.add(ao)			#o.save()			return CallReturn()		except:			return SYSERROR()		def removeAoFromSysGroup(self,r,gid,aoid):		try:			o = AO_SysGroup.objects.get(id=gid)			ao = ActiveObject.objects.get(id=aoid)			o.aos.remove(ao)			#for id in aos:			#	set = o.aos.filter(id=id)			#	o.aos.remove(set)			#o.save()			return CallReturn()		except:			return SYSERROR()		def getAoSysGroupDetail(self,r,gid):		try:			g = AO_SysGroup.objects.get(id = gid)			g = utils.hashobject(g)			return CallReturn(result = g )		except:			return SYSERROR()	def getAoSysGroupList(self,r,name):		try:			name = name.strip()			rs = AO_SysGroup.objects.filter(name__icontains=name).order_by('name').values()			for r in rs:				o = AO_SysGroup.objects.get(id=r['id'])				r['size']=o.aos.all().count()			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()		#取系统设备组内的ao对象列表	def getAoListOfSysGroup(self,r,gid,name):		try:			gs = AO_SysGroup.objects.filter(id=gid)			if not gs:				return CallReturn(succ=False,msg=u'组对象不存在!')			g = gs[0]			o = AO_SysGroup.objects.filter(id=g.id)			name = name.strip()			rs = g.aos.filter(name__icontains=name).order_by('name').values()			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()			#[admin]	def createUser(self,r,u):		try:			u.sid = u.sid.strip()			u.passwd = u.passwd.strip()			u.name = u.name.strip()			if not u.sid:return CallReturn(succ=False,msg=u'用户标示不能为空!')							if not u.passwd:return CallReturn(succ=False,msg=u'密码不能为空!')			if not u.name:return CallReturn(succ=False,msg=u'用户名称不能为空!')						cnt = AppUser.objects.filter(sid=u.sid).count()			if cnt:				return CallReturn(succ=False,msg=u'用户标识重复!')			user = AppUser()			user.sid = u.sid			user.passwd = u.passwd			user.name = u.name			user.address = u.address.strip()			user.zipcode = u.zipcode.strip()			user.phone = u.phone.strip()			user.contactman = u.contactman.strip()			user.comment = u.comment.strip()			user.save()			user = utils.hashobject(user)			return CallReturn(result=user)		except:			return SYSERROR()		def updateUser(self,r,u):		try:			u.sid = u.sid.strip()			u.passwd = u.passwd.strip()			u.name = u.name.strip()			if not u.sid:return CallReturn(succ=False,msg=u'用户标示不能为空!')							if not u.passwd:return CallReturn(succ=False,msg=u'密码不能为空!')			if not u.name:return CallReturn(succ=False,msg=u'用户名称不能为空!')						cnt = AppUser.objects.filter(sid=u.sid).exclude(id=u.id).count()			if cnt:				return CallReturn(succ=False,msg=u'用户标识已被使用!')			user = AppUser.objects.get(id=u.id)			user.sid = u.sid			user.passwd = u.passwd			user.name = u.name			user.address = u.address.strip()			user.zipcode = u.zipcode.strip()			user.phone = u.phone.strip()			user.contactman = u.contactman.strip()			user.comment = u.comment.strip()			user.enable = u.enable			user.save()			print dir(user)			user = utils.hashobject(user)			print user			return CallReturn(result=user) #完成更新		except:						return SYSERROR()		@transaction.commit_manually	def deleteUser(self,r,u):		try:			o = AppUser.objects.get(id=u.id)			cnt = o.aos.all().count()			if cnt:				return CallReturn(succ=False,msg=u'用户存在设备关联，请先删除ao设备!')			#o.aos.clear() 			AO_AppGroup.objects.filter(user__id=u.id).delete()#删除组			o.delete() #删除用户			transaction.commit()			return CallReturn()		except:			return SYSERROR()		#启用或禁用用户	def enableUser(self,r,u,enable=True):		try:			o = AppUser.objects.get(id=u.id)			o.enable = enable			o.save()			return CallReturn()		except:			return SYSERROR()		#获取用户列表#	'''qtype -  1 query by sid#					2  query by name#			locked - 是否锁定 true/false#	'''	def getUserList(self,r,qtype,text,enable):		try:#			u =  AppUser.objects.get(sid='tiger')#			print dir(u)#			return CallReturn()			text  =text.strip()			rs =[]			if qtype == 1:				rs = AppUser.objects.filter(sid__icontains=text,enable = enable).order_by('sid').values()			elif qtype == 2:				rs = AppUser.objects.filter(name__icontains=text,enable = enable).order_by('name').values()			for r in rs:				if r['enable']:					r['enable_str'] = u'可用'				else:					r['enable_str'] = u'锁定'			utils.add_index(rs)			return CallReturn(result=rs)		except:			traceback.print_exc()			return SYSERROR()		def getUserDetail(self,r,uid):		try:			o = AppUser.objects.filter(id=uid).values()			return CallReturn(result=o[0])		except:			return SYSERROR()		@transaction.commit_manually	def addAoIntoUser(self,r,uid,aos):		try:			u = AppUser.objects.get(id=uid)			for aoid in aos:				ao = ActiveObject.objects.get(id = aoid)				u.aos.add(ao)			transaction.commit()			return CallReturn()		except:			return SYSERROR()	@transaction.commit_manually	def addAoIntoUserGroup(self,r,gid,aos):		try:			g = AO_AppGroup.objects.get(id=gid)			for aoid in aos:				ao = ActiveObject.objects.get(id = aoid)				g.aos.add(ao)			transaction.commit()			return CallReturn()		except:			transaction.rollback();			return SYSERROR()	#脱离ao与user和group的关系	@transaction.commit_manually	def removeAoFromUser(self,r,uid,aoid):		#ao对象，脱离ao与appgroup关联		try:			u = AppUser.objects.get(id=uid)			ao = ActiveObject.objects.get(id = aoid)			u.aos.remove(ao)						gs = AO_AppGroup.objects.filter(user__id=u.id)			for g in gs:				g.aos.remove(ao)			transaction.commit()			return CallReturn()		except:			transaction.rollback()			return SYSERROR()	def removeAoFromUserGroup(self,r,gid,aoid):		#ao对象，脱离ao与appgroup关联		try:			g = AO_AppGroup.objects.get(id=gid)			ao = ActiveObject.objects.get(id = aoid)			g.aos.remove(ao)			return CallReturn()		except:			#transaction.rollback()			return SYSERROR()	#查询停车报告	#def queryAoStopRecords(self,r,)		#查询ao行驶里程列表	#def getReport_AoMile(self,r,name,start,end):	#	pass	#	##当日行驶里程	#def getReport_AoMile_Today(self,r,name):	#	pass	#	##当月日里程统计 (1-月底日)	#def getReport_AoMile_DaysOfCurrMonth(self,r,name,pg=None):	#	pass	#	##当月里程统计	#def getReport_AoMile_CurrMonth(self,r,name,pg=None)	#	pass	#	##查询超速列表	#def getReport_AoSpeedOver(self,r,name,start,end,pg=None):	#	pass	#	##查询停车列表	#def getReport_AoStop(self,r,name,start,end,pg=None):	#	pass	#	##当日停车记录(开始时间、结束时间、时常、地理位置)	#def getReport_AoStop_Today(self,r,name,pg=None):	#	pass	#	##当前ao运行状态列表	##返回在线离线比例	#def getAoCurrentStatus(self,r,name):	#	pass	#	##查询报警记录 	#def getReport_AoAlarm(self,r,name,start,end,pg=None):	#	pass			#创建ao对象	@transaction.commit_manually	def createActiveObject(self,r,ao):		try:			ao.name = ao.name.strip()[:40]			ao.dasid = ao.dasid.strip()[:40]			ao.comment = ao.comment.strip()			ao.zipcode = ao.zipcode.strip()[:30]			ao.telphone = ao.telphone.strip()[:30]			ao.contact = ao.contact.strip()[:40]			ao.address = ao.address.strip()[:100]			ao.sid = ao.sid.strip()[:30]			if not ao.name:				return CallReturn(succ=False,msg=u'Ao对象名称不能为空！')						if not ao.dasid:				return CallReturn(succ=False,msg=u'必须设定das服务器id!')			if ActiveObject.objects.filter(name=ao.name).count():				return CallReturn(succ=False,msg=u'相同的设备名称已存在！')			if AO_Module.objects.filter(sid=ao.sid).count():				return CallReturn(succ=False,msg=u'设备硬件编号已经存在!')			if not ao.expire_time:				return CallReturn(succ=False,msg=u'请设置有效期开始时间!')			if not ao.expire_time:				return CallReturn(succ=False,msg=u'请设置有效期终止时间!')			if len(ao.sid)==0:				return CallReturn(succ=False,msg=u'硬件编号必须设置!')			ao.active_time,ao.expire_time =\			utils.normalize_querytime2(ao.active_time,ao.expire_time)			dbao = ActiveObject()			dbao.name = ao.name			dbao.dasid = ao.dasid			dbao.comment = ao.comment			dbao.zipcode = ao.zipcode			dbao.telphone = ao.telphone			dbao.contact = ao.contact			dbao.address = ao.address			dbao.active_time = datetime.datetime.now()			dbao.expire_time = ao.expire_time			dbao.type = ao.type			dbao.devtype = ao.devtype			dbao.enable = ao.enable			dbao.save()						aom = None			aom = AO_Module()			aom.ao = dbao			aom.idx = 0			aom.type = AoModuleType.GPS			aom.sid = ao.sid			aom.svcname = 'ks-108'			aom.ver=''			aom.settings ='{}'			aom.save()			transaction.commit()			#发送ao增加通知消息到das			m = MsgAo_DasLoad_6()			m['aoid'] = dbao.id			GisServer.instance().sendCtrlMsg(m)			#返回设备信息			r = utils.hashobject(dbao)			r['sid'] = ao.sid			r['mid'] = aom.id			return CallReturn(result=r) #创建activeobject成功		except:			transaction.rollback()			return SYSERROR()		#更新ao信息，并更新隶属于ao的modules	@transaction.commit_manually	def updateActiveObject(self,r,ao):		try:			ao.name = ao.name.strip()[:40]			ao.dasid = ao.dasid.strip()[:40]			ao.comment = ao.comment.strip()			ao.zipcode = ao.zipcode.strip()[:30]			ao.telphone = ao.telphone.strip()[:30]			ao.contact = ao.contact.strip()[:40]			ao.address = ao.address.strip()[:100]			ao.sid = ao.sid.strip()			if not ao.name:				return CallReturn(succ=False,msg=u'Ao对象名称不能为空！')						if not ao.dasid:				return CallReturn(succ=False,msg=u'必须设定das服务器id!')			#查询 name是否被其他ao占用			if not ao.expire_time:				return CallReturn(succ=False,msg=u'请设置有效期开始时间!')			if not ao.expire_time:				return CallReturn(succ=False,msg=u'请设置有效期终止时间!')			if len(ao.sid)==0:				return CallReturn(succ=False,msg=u'硬件编号必须设置!')			ao.active_time,ao.expire_time = \				utils.normalize_querytime2(ao.active_time,ao.expire_time)			cnt = ActiveObject.objects.filter(name__icontains=ao.name).exclude(id=ao.id).count()			if cnt:				return CallReturn(succ=False,msg=u'AO设备名称已被使用!')			cnt = AO_Module.objects.filter(sid=ao.sid).exclude(ao__id=ao.id).count()			if cnt:				return CallReturn(succ=False,msg=u'设备编号已被其他设备使用!')			dbao = ActiveObject.objects.get(id=ao.id)			dbao.name = ao.name			dbao.dasid = ao.dasid			dbao.comment = ao.comment			dbao.zipcode = ao.zipcode			dbao.telphone = ao.telphone			dbao.contact = ao.contact			dbao.address = ao.address			dbao.active_time = ao.active_time			dbao.expire_time = ao.expire_time			dbao.type = ao.type			dbao.devtype = ao.devtype			print ao.devtype			dbao.enable = ao.enable			dbao.save()			aom = AO_Module.objects.get(id=ao.mid)			aom.sid = ao.sid			aom.save()			transaction.commit()			#发送ao增加通知消息到das			#重新挂载ao到das			m = MsgAo_DasUnload_6()			m['aoid'] = ao.id			GisServer.instance().sendCtrlMsg(m)			m = MsgAo_DasLoad_6()			m['aoid'] = ao.id			GisServer.instance().sendCtrlMsg(m)			rst = self.getActiveObjectDetail(r,ao.id)			return CallReturn(result=rst) #创建activeobject成功		except:			return SYSERROR()		#删除ao并删除modules	#从group中剔除，从user中剔除,删除其他与ao关联的工作表	@transaction.commit_manually	def deleteActiveObject(self,r,aoid):		try:			#AO_CtrlLog.objects.filter(ao__id=aoid).delete()			#AO_AlarmLog.objects.filter(ao__id=aoid).delete()			AO_Module.objects.filter(ao__id=aoid).delete()			AO_AlarmLog.objects.filter(ao__id=aoid).delete()			AO_ModuleLog.objects.filter(ao__id=aoid).delete()			#AOMData_Image.objects.filter(ao__id=aoid).delete()			rs = AO_SysGroup.objects.all()			ao = ActiveObject.objects.get(id= aoid )			for r in rs:				r.aos.remove(ao)			rs = AO_AppGroup.objects.all()			for r in rs:				r.aos.remove(ao)			dasid = ao.dasid			ao.delete()			transaction.commit()			#发送ao增加通知消息到das			m = MsgAo_DasUnload_6()			m['aoid'] = aoid			m['dasid'] = dasid			GisServer.instance().sendCtrlMsg(m)			return CallReturn()		except:			transaction.rollback()			return SYSERROR()		def getActiveObjectList(self,r,text,uid=-1): #qtype=1,enable=True,pg=None):		'''qtype - 1 名称过滤; 2 - 系统组名称过滤			enable - 是否启用		'''		try:			print 'uid:',uid			text = text.strip()			if uid > 0:				aos = AppUser.objects.get(id=uid).aos.filter(name__icontains=text).order_by('name')			else:				aos = ActiveObject.objects.filter(name__icontains=text).order_by('name')			result=[]			for ao in aos:				r = self.getActiveObjectDetail(r,ao.id).result				result.append( r)			utils.add_index(result)			return CallReturn(result=result)		except:			return SYSERROR()	def getUserAoGroupDetail(self,r,gid):		try:			g = AO_AppGroup.objects.get(id = gid)			g = utils.hashobject(g)			print dir(g)			return CallReturn(result = g)		except:			return SYSERROR()	def getUserAoGroups(self,r,uid):		"""		获取用户设备组		"""		try:			rs = AO_AppGroup.objects.filter(user=uid).order_by('name').values()			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()	#获取指定用户id的ao对象列表	def getActiveObjectListOfUser(self,r,uid,text='',pg=None):		'''text - 检索过滤		'''		try:			text = text.strip()			user =AppUser.objects.get(id=uid)			aos = user.aos.filter(name__icontains=text).order_by('name')			result=[]			cc=1			for ao in aos:				ao = self.getActiveObjectDetail(r,ao.id).result				print ao				ao['idx'] =  cc				result.append( ao)				cc+=1			return CallReturn(result=result)		except:			return SYSERROR()	def getActiveObjectListOfUserGroup(self,r,gid,text='',pg=None):		'''查询用户组内的设备		 '''		try:			text = text.strip()			g =AO_AppGroup.objects.get(id=gid)			aos = g.aos.filter(name__icontains=text).order_by('name')			result=[]			cc=1			for ao in aos:				ao = self.getActiveObjectDetail(r,ao.id).result				ao['idx'] =  cc				result.append( ao)				cc+=1			return CallReturn(result=result)		except:			return SYSERROR()		#发送控制命令	#控制命令写入AO_CtrlLog表 	def ctrlAoCommand(self,r,aoid,cmdparams):		try:			ao = ActiveObject.objects.get(id=aoid)			clog = AO_CtrlLog()			clog.ao = ao			clog.delta = cmdparams			clog.save()		except:			return SYSERROR()		#获取ao明细	def getActiveObjectDetail(self,r,aoid):		try:			rs = ActiveObject.objects.filter(id=aoid).values()			ao = rs[0]			rs = AO_Module.objects.filter(ao__id=aoid).values()			ao['modules']=rs			ao['gps'] = rs[0] #定是gps模块			ao['sid'] = rs[0]['sid']			ao['mid'] = rs[0]['id']#			ao['enabled_s'] = u'停用'#			if ao['enabled']:#				ao['enabled_s'] = u'启用'			ao['type_s']= u'未定义'			ao['active_time_s'] = utils.formatDateTime(ao['active_time'])			ao['expire_time_s'] = utils.formatDateTime(ao['expire_time'])			return CallReturn(result=ao)		except:			return SYSERROR()		#停用或者启用ao	def enableActiveObject(self,r,aoid,enable=True):		try:			ao = ActiveObject.objects.get(id=aoid)			ao.enabled = enable			ao.save()			return CallReturn()		except:			return SYSERROR()	def queryLoginList(self,r,name,succ,start,end):		"""		查询登陆历史		name - 用户名; succ - 登陆是否成功		start,end - 开始结束时间		succ - 0  all; 1 - succed ; 2 - fail		"""		try:			succ = int(succ)			name = name.strip()			start,end = utils.normalize_querytime2(start,end)			print name,succ,start,end			rs=[]			if succ == 0:				rs = UserLoginLog.objects.filter(login__icontains=name,\			                                 time__range=(start,end)).order_by('-time').values()			else:				succ = succ == 1				rs = UserLoginLog.objects.filter(login__icontains=name,\				                                 time__range=(start,end),\				                                 succ=succ).order_by('-time').values()			for r in rs:				r['succ_s'] = u'成功'				if not r['succ']:					r['succ_s'] = u'失败'				r['time_str'] = utils.formatDateTime(r['time'])			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()	def getSysParamList(self,r,text):		try:			text = text.strip()			rs = SystemGlobalSettings.objects.filter(name__icontains=text).order_by('name').values()			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()	def getSysParamInfo(self,r,id):		try:			p = SystemGlobalSettings.objects.get(id=id)			p =utils.hashobject(p)			return CallReturn(result=p)		except:			return SYSERROR()	def createSysParam(self,r,p):		try:			p.name = p.name.strip()			p.value = p.value.strip()			p.comment = p.comment.strip()			if not p.name:				return CallReturn(succ=False,msg=u'无效的字段名称!')			if SystemGlobalSettings.objects.filter(name=p.name).count():				return CallReturn(succ=False,msg=u'存在相同名称参数!')			sp = SystemGlobalSettings()			sp.name = p.name			sp.value = p.value			sp.comment = p.comment			sp.save()			p = utils.hashobject(sp)			return CallReturn(result=p)		except:			return SYSERROR()	def updateSysParam(self,r,p):		try:			p.name = p.name.strip()			p.value = p.value.strip()			p.comment = p.comment.strip()			sp = SystemGlobalSettings.objects.get(id=p.id)			sp.name = p.name			sp.value = p.value			sp.comment = p.comment			sp.save()			p = utils.hashobject(sp)			return CallReturn(result=p)		except:			return SYSERROR()	def deleteSysParam(self,r,id):		try:			SystemGlobalSettings.objects.get(id=id).delete()			return CallReturn()		except:			return SYSERROR()	def getUserMessageList(self,r,text,start,end,replied):		try:			text = text.strip()			start,end = utils.normalize_querytime2(start,end)			rs=[]			if replied == False:				rs = UserMessage.objects.filter(title__icontains=text,			                                time__range=(start,end)).order_by('-time')[:200]			else:				rs = UserMessage.objects.filter(title__icontains=text,				                                time__range=(start,end)).exclude(replytime=None).order_by('-time')[:200]			result=[]			for r in rs:				user = r.user.sid				r = utils.hashobject(r)				r['time'] = utils.formatDateTime(r['time'])				r['replytime'] = utils.formatDateTime(r['replytime'])				r['user'] = user				result.append(r)			utils.add_index(result)			return CallReturn(result=result)		except:			return SYSERROR()	#删除用户留言	def deleteUserMessage(self,r,id):		try:			UserMessage.objects.get(id=id).delete()			return CallReturn()		except:			return SYSERROR()	#用户留言回复	def replyUserMessage(self,r,id,text):		try:			m = UserMessage.objects.get(id=id)			m.replytime = datetime.datetime.now()			m.replycontent = text.strip()			m.save()			return CallReturn()		except:			return SYSERROR()	#获取通告列表	def getNoticeList(self,r,start,end):		try:			start,end = utils.normalize_querytime2(start,end)			rs = SysNotice.objects.filter(time__range=(start,end)).order_by('-time').values()[:200]			for r in rs:				r['time_s'] = utils.formatDateTime(r['time'])			utils.add_index(rs)			return CallReturn(result=rs)		except:			return SYSERROR()	def createNoticeItem(self,r,n):		try:			n.topic = n.topic.strip()			n.content = n.content.strip()			if not n.content or n.topic=='':				return CallReturn(succ=False,msg=u'通告主题和内容不能为空!')			item = SysNotice()			item.content = n.content			item.topic = n.topic			item.time = datetime.datetime.now()			item.save()			return CallReturn()		except:			return SYSERROR()	def updateNoticeItem(self,r,n):		try:			n.topic = n.topic.strip()			n.content = n.content.strip()			if not n.content or n.topic=='':				return CallReturn(succ=False,msg=u'通告主题和内容不能为空!')			notice = SysNotice.objects.get(id=n.id)			notice.content = n.content			notice.topic = n.topic			notice.save()			return CallReturn()		except:			return SYSERROR()	#删除通告项	def deleteNoticeItem(self,r,id):		try:			SysNotice.objects.filter(id=id).delete()			return CallReturn()		except:			return SYSERROR()	def cvtpoint_gps2map(self,gps):		from pycomm import geotools		x,y = geotools.point_g2m(gps['lon'] , gps['lat'] )		gps['lon'] = x		gps['lat'] = y		gps['systime'] = utils.mk_timestamp(gps['savetime'])	#返回最近ao的gps轨迹	def getAoNearestGpsData(self,r,aoid):		try:			d=None			ao = ActiveObject.objects.get(id=aoid)			rs = AOMData_Gps.objects.filter(ao__id=aoid).exclude(lon=0).exclude(speed=0).order_by('-savetime')[:1].values()			rs = AOMData_Gps.objects.filter(ao__id=aoid).exclude(lon=0).order_by('-savetime')[:1].values()			if len(rs):				d = rs[0]				self.cvtpoint_gps2map(d)			ao = utils.hashobject(ao)			ao['gps'] = d			return CallReturn(result=ao)		except:			return SYSERROR()#################################################################	# gisQuery - 查询gis对象信息	def gisGeoObjectQuery(self,r,text,geotype,city,pg=None):		# text  - 查询输入文本		# geotype -  1 poi; 2 road ; 3 所有类型		# city -  城市名称 , ''表示检索所有城市		# pg - 分页控制				try:			print text,geotype,city			cur = self.idxdb.cursor()			sql = "select * from geoindex where "			params =[]			where =''			if city:								where+=" city=? "				params.append(city)							if geotype !=0x03:				if where:					where+= " and "				where+=" geotype=?"				params.append(geotype)						if text:				d = text.strip().split(' ')				d = map(string.strip,d)				text = '%'+string.join(d,'%')+'%'				where+=" and name like ? "				params.append(text)			sql+=where + " limit 100"			#sql+= " order by name limit 100"			print sql			#return CallReturn(succ=False)					cur.execute(sql,params)			set=[]			r = cur.fetchone()			while r:				x={}				x['city'] = CHINA_CITY[r[0]]				x['x'] = r[1]				x['y'] = r[2]				x['xy'] = "%.4f,%.4f"%(r[1],r[2])				x['name'] = r[3]				x['kind'] = r[4]	#类型				x['geotype'] = r[6]				set.append(x)				r = cur.fetchone()			print 'result count:',len(set)			return CallReturn(result=set)		except:			print traceback.format_exc().decode('utf8')			return CallReturn(succ=False,msg=u'system error')		#################################################################if __name__=='__main__':	GisAdmin.instance().getUserList(None,1,'',False)